require('dotenv').config();
const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const WB_API_KEY = process.env.WB_API_KEY;
const WB_API_URL = 'https://statistics-api.wildberries.ru/api/v1/supplier/orders';
const SYNC_TABLE = 'wb_orders'; // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
const STATE_TABLE = 'sync_state'; // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const SYNC_ID = 'wb_orders_sync'; // ID –≤–∞—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
const BATCH_SIZE = 500; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
const REQUEST_DELAY = 1000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (1 —Å–µ–∫)

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function syncOrders() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö Wildberries ‚Üí Supabase');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const lastSyncDate = await getLastSyncDate();
    console.log(`‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${lastSyncDate || '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
    
    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WB —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    let allOrders = [];
    let currentDate = lastSyncDate;
    let page = 1;
    let hasMoreData = true;
    
    while (hasMoreData) {
      console.log(`üì° –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å ${currentDate}`);
      
      const orders = await fetchWbOrders(currentDate);
      
      if (orders.length === 0) {
        console.log('‚ÑπÔ∏è –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        hasMoreData = false;
        break;
      }
      
      allOrders = [...allOrders, ...orders];
      console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${orders.length} –∑–∞–ø–∏—Å–µ–π (–í—Å–µ–≥–æ: ${allOrders.length})`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      currentDate = getMaxDate(orders);
      page++;
      
      // –ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
      await delay(REQUEST_DELAY);
    }
    
    // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Supabase
    if (allOrders.length > 0) {
      await saveToSupabase(allOrders);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${allOrders.length}`);
    }
    
    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await updateSyncState(currentDate);
    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        status: error.response.status,
        data: error.response.data
      });
    }
  }
}

// ======= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =======

// –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function getLastSyncDate() {
  try {
    const { data, error } = await supabase
      .from(STATE_TABLE)
      .select('last_sync_date')
      .eq('id', SYNC_ID)
      .single();

    if (error && error.code !== 'PGRST116') { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º "—Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      throw error;
    }
    
    return data?.last_sync_date || '2023-01-01T00:00:00Z';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
    return '2023-01-01T00:00:00Z';
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function updateSyncState(lastDate) {
  try {
    const { error } = await supabase
      .from(STATE_TABLE)
      .upsert(
        { 
          id: SYNC_ID, 
          last_sync_date: lastDate,
          last_sync: new Date().toISOString() 
        },
        { onConflict: 'id' }
      );

    if (error) throw error;
    console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastDate}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∑–∞–∫–∞–∑–æ–≤
function getMaxDate(orders) {
  return orders.reduce((max, order) => 
    order.lastChangeDate > max ? order.lastChangeDate : max, 
    orders[0]?.lastChangeDate || ''
  );
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Wildberries API
async function fetchWbOrders(dateFrom) {
  try {
    const response = await axios.get(WB_API_URL, {
      params: { dateFrom },
      headers: { 
        Authorization: WB_API_KEY,
        'Accept-Encoding': 'gzip,deflate,compress' 
      },
      timeout: 30000
    });

    return response.data || [];
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ WB API:', error.message);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏
    if (error.code === 'ECONNABORTED' || !error.response) {
      console.log('üîÑ –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...');
      await delay(10000);
      return fetchWbOrders(dateFrom);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—à–∏–±–æ–∫
    if (error.response) {
      console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`, error.response.data);
      
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ 429 (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤) - –ø–∞—É–∑–∞
      if (error.response.status === 429) {
        const retryAfter = error.response.headers['retry-after'] || 60;
        console.log(`‚è≥ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–∞—É–∑–∞ ${retryAfter} —Å–µ–∫...`);
        await delay(retryAfter * 1000);
        return fetchWbOrders(dateFrom);
      }
    }
    
    return [];
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
async function saveToSupabase(orders) {
  try {
    console.log(`üì§ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${orders.length} –∑–∞–ø–∏—Å–µ–π...`);
    
    const transformedOrders = orders.map(order => ({
      date: convertDate(order.date),
      last_change_date: convertDate(order.lastChangeDate),
      warehouse_name: order.warehouseName,
      warehouse_type: order.warehouseType,
      country_name: order.countryName,
      oblast_okrug_name: order.oblastOkrugName,
      region_name: order.regionName,
      supplier_article: order.supplierArticle,
      nm_id: order.nmId,
      barcode: order.barcode,
      category: order.category,
      subject: order.subject,
      brand: order.brand,
      tech_size: order.techSize,
      income_id: order.incomeID,
      is_supply: order.isSupply,
      is_realization: order.isRealization,
      total_price: order.totalPrice,
      discount_percent: order.discountPercent,
      spp: order.spp,
      finished_price: order.finishedPrice,
      price_with_disc: order.priceWithDisc,
      is_cancel: order.isCancel,
      cancel_date: order.cancelDate !== '0001-01-01T00:00:00' 
        ? convertDate(order.cancelDate) 
        : null,
      sticker: order.sticker,
      g_number: order.gNumber,
      srid: order.srid
    }));

    // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    for (let i = 0; i < transformedOrders.length; i += BATCH_SIZE) {
      const batch = transformedOrders.slice(i, i + BATCH_SIZE);
      
      const { error } = await supabase
        .from(SYNC_TABLE)
        .upsert(batch, { onConflict: 'srid' });
      
      if (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–∞ ${i}-${i + batch.length}:`, error.message);
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
        await supabase.from(SYNC_TABLE).upsert(batch, { onConflict: 'srid' });
      } else {
        console.log(`‚úì –ü–∞–∫–µ—Ç ${i}-${i + batch.length} —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      await delay(300);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
    throw error;
  }
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç
function convertDate(dateString) {
  if (!dateString) return null;
  // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
  if (dateString.includes('T') && dateString.endsWith('Z')) {
    return dateString;
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  return new Date(dateString + (dateString.endsWith('Z') ? '' : 'Z')).toISOString();
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
syncOrders();